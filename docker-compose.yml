#contenedores a levantar en local, donde se usan las imagenes
services:
  spring-api-image:
    #UTILIZA LA IMAGEN CREADA ANTERIORMENTE DEL BACKEND
    image: spring-api-image
    #Nombre del container
    container_name: spring-api-container
    #estas variables estan disponibles para este contenedor, es decir estara disponible para el backend
    env_file:
      - .env
    ports:
    #DEFINE EL PUERTO DONDE SE PODRA HACER PETICIONES Y EL PUERTO DONDE SE CONSUMIRA LAS PETICIONES
      - "8082:8080"
    networks:
      - spring-network
    depends_on:
      - redis
      - mysql
#   para optimizar el properties asi no necesitamos crear neuva imagen
#    volumes:
#      - ./application.properties:/root/src/main/resources/application.properties
  mysql:
    image: mysql
    container_name: mysql_database
    #creamos una instancia
    environment:
      #USA LAS VARIABLES DE ENTORNO DEL SISTEMA
      #para acceso a la bd
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER_NAME}
      MYSQL_PASSWORD: ${DB_USER_PASSWORD}
    ports:
      - "3307:3306"
    networks:
      - spring-network
    volumes:
      - mysql-volume:/var/lib/mysql
  redis:
    image: redis:6.2
    container_name: redis_container
    ports:
      - "6380:6379"
    networks:
      - spring-network
    command: redis-server --loglevel debug
networks:
  spring-network:
    name: spring-network
    driver: bridge
volumes:
  mysql-volume:
